{"version":3,"sources":["synth.js","App.js","serviceWorker.js","index.js"],"names":["audioContext","osc","filter","amp","lfo","delay","delaySource","feedback","recorder","recordingStream","window","AudioContext","webkitAudioContext","synth","createGain","gain","setValueAtTime","currentTime","createBiquadFilter","type","frequency","createOscillator","value","connect","start","createDelay","delayTime","state","resume","destination","disconnect","oscFreq","console","log","filterFreq","volume","amount","time","createMediaStreamDestination","MediaRecorder","stream","audioBitsPerSecond","mimeType","addEventListener","e","document","querySelector","src","URL","createObjectURL","data","stop","App","playing","recording","startSynth","setState","toggleRecording","stopRecording","startRecording","init","target","name","changeFreq","changeFilterFreq","changeAmp","changeLfoSpeed","changeDelayTime","changeDelayFeedback","className","onClick","this","for","orient","min","max","step","onInput","handleChange","id","controls","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wIAAIA,EAAcC,EAAKC,EAAQC,EAAKC,EAAKC,EAAOC,EAAaC,EAAUC,EAAUC,E,0EAEjFT,EAAe,IAAIU,OAAOC,cAAgBD,OAAOE,oB,ICE7CC,EAAQ,I,gGDGJV,EAAMH,EAAac,cACfC,KAAKC,eAAe,EAAGhB,EAAaiB,cAGxCf,EAASF,EAAakB,sBACfC,KAAO,WACdjB,EAAOkB,UAAUJ,eAAe,IAAMhB,EAAaiB,aACnDf,EAAOa,KAAKC,eAAe,GAAIhB,EAAaiB,cAG5ChB,EAAMD,EAAaqB,oBACfF,KAAO,OACXlB,EAAImB,UAAUE,MAAQ,KAGtBlB,EAAMJ,EAAaqB,oBACfF,KAAO,OACXf,EAAIgB,UAAUE,MAAQ,GAGtBlB,EAAImB,QAAQpB,EAAIY,MAChBd,EAAIsB,QAAQrB,GACZA,EAAOqB,QAAQpB,GACfC,EAAIoB,QACJvB,EAAIuB,QAGJlB,EAAcH,GACdE,EAAQL,EAAayB,eACfC,UAAUJ,MAAQ,IAExBf,EAAWP,EAAac,cACfC,KAAKO,MAAQ,GAEtBjB,EAAMkB,QAAQhB,GACdA,EAASgB,QAAQlB,GACjBC,EAAYiB,QAAQlB,K,8BAIO,YAAvBL,EAAa2B,OACb3B,EAAa4B,SAEjBzB,EAAIoB,QAAQvB,EAAa6B,aACzBvB,EAAYiB,QAAQvB,EAAa6B,aACjCxB,EAAMkB,QAAQvB,EAAa6B,e,6BAI3B1B,EAAI2B,WAAW9B,EAAa6B,aAC5BxB,EAAMyB,WAAW9B,EAAa6B,e,iCAGvBE,GACPC,QAAQC,IAAI,kBAAoBF,EAAU,OAC1C9B,EAAImB,UAAUE,MAAQS,I,uCAGTG,GACbF,QAAQC,IAAI,qBAAuBC,EAAa,OAChDhC,EAAOkB,UAAUE,MAAQY,I,gCAGnBC,GACNH,QAAQC,IAAI,WAAaE,GACzBhC,EAAIY,KAAKO,MAAQa,EACjB7B,EAAYS,KAAKO,MAAQa,I,qCAGdC,GACXJ,QAAQC,IAAI,cAAgBG,EAAS,OACrChC,EAAIgB,UAAUE,MAAQc,I,sCAGVC,GACZL,QAAQC,IAAI,eAAiBI,GAC7BhC,EAAMqB,UAAUJ,MAAQe,I,0CAGRD,GAChBJ,QAAQC,IAAI,mBAAqBG,GACjC7B,EAASQ,KAAKO,MAAQc,I,uCAItB3B,EAAkBT,EAAasC,+BAG/BnC,EAAIoB,QAAQd,GACZH,EAAYiB,QAAQd,GACpBJ,EAAMkB,QAAQd,IAMdD,EAAW,IAAI+B,cAAc9B,EAAgB+B,OAJ/B,CACVC,mBAAoB,MACpBC,SAAU,gBAGLlB,U,sCAIThB,EAASmC,iBAAiB,gBAAiB,SAASC,GAChDC,SAASC,cAAc,cAAcC,IAAIC,IAAIC,gBAAgBL,EAAEM,MAC/D1C,EAAW,KACXC,EAAkB,OAEtBD,EAAS2C,W,MC+DFC,E,2MAzKbzB,MAAQ,CACN0B,SAAS,EACTC,WAAW,G,EAQbC,WAAa,SAAAF,GACPA,GACFxC,EAAMsC,OACN,EAAKK,SAAS,CAACH,SAAS,MAExBxC,EAAMW,QACN,EAAKgC,SAAS,CAACH,SAAS,M,EAI5BI,gBAAkB,SAAAH,GACXA,GAIHzC,EAAM6C,gBACN,EAAKF,SAAS,CAACF,WAAW,MAJ1BzC,EAAM8C,iBACN,EAAKH,SAAS,CAACF,WAAW,M,mFAhB5BzC,EAAM+C,S,sCAuBkB,IAAXC,EAAU,EAAVA,OACb,OAAQA,EAAOC,MACb,IAAK,OACHjD,EAAMkD,WAAWF,EAAOvC,OACxB,MACF,IAAK,cACHT,EAAMmD,iBAAiBH,EAAOvC,OAC9B,MACF,IAAK,MACHT,EAAMoD,UAAUJ,EAAOvC,OACvB,MACF,IAAK,MACHT,EAAMqD,eAAeL,EAAOvC,OAC5B,MACF,IAAK,aACHT,EAAMsD,gBAAgBN,EAAOvC,OAC7B,MACF,IAAK,iBACHT,EAAMuD,oBAAoBP,EAAOvC,OACjC,MACF,QACEU,QAAQC,IAAI,mB,+BAIR,IAAD,OACP,OACE,6BACE,yBAAKoC,UAAU,OACb,4BACEA,UAAU,SACVC,QAAS,kBAAM,EAAKf,WAAW,EAAK5B,MAAM0B,WAEzCkB,KAAK5C,MAAM0B,QAAU,KAAO,OAE/B,uBAAGgB,UAAU,SAAb,UACA,4BACEA,UAAU,aACVC,QAAU,kBAAM,EAAKb,gBAAgB,EAAK9B,MAAM2B,YAChDQ,KAAMS,KAAK5C,MAAM2B,UAAY,OAAS,UAEtC,yBAAKe,UAAWE,KAAK5C,MAAM2B,UAAY,SAAW,aAGtD,yBAAKe,UAAU,YACb,yBAAKA,UAAU,UACb,2BAAOA,UAAU,kCAAkCG,IAAI,gBAAvD,UACA,yBAAKV,KAAK,eAAeO,UAAU,YACjC,yBAAKA,UAAU,yBACb,2BACElD,KAAK,QACLsD,OAAO,WACPX,KAAK,MACLY,IAAI,IACJC,IAAI,IACJC,KAAK,OACLC,QAAUN,KAAKO,eAEjB,2BAAON,IAAI,OAAX,eAEF,yBAAKH,UAAU,WACb,2BACElD,KAAK,QACLsD,OAAO,WACPX,KAAK,OACLY,IAAI,KACJC,IAAI,OACJC,KAAK,IACLC,QAAUN,KAAKO,eAEjB,2BAAON,IAAI,QAAX,QAEF,yBAAKH,UAAU,WACb,2BACElD,KAAK,QACLsD,OAAO,WACPX,KAAK,cACLY,IAAI,KACJC,IAAI,OACJC,KAAK,IACLC,QAAUN,KAAKO,eAEjB,2BAAON,IAAI,eAAX,QAEF,yBAAKH,UAAU,WACb,2BACElD,KAAK,QACLsD,OAAO,WACPX,KAAK,MACLY,IAAI,IACJC,IAAI,MACJC,KAAK,IACLC,QAAUN,KAAKO,eAEjB,2BAAON,IAAI,OAAX,UAIN,yBAAKH,UAAU,UACb,2BAAOA,UAAU,eAAeG,IAAI,gBAApC,SACA,yBAAKV,KAAK,eAAeO,UAAU,YACjC,yBAAKA,UAAU,WACb,2BACElD,KAAK,QACLsD,OAAO,WACPX,KAAK,aACLY,IAAI,IACJC,IAAI,IACJC,KAAK,OACLC,QAAUN,KAAKO,eAEjB,2BAAON,IAAI,cAAX,SAEF,yBAAKH,UAAU,WACb,2BACElD,KAAK,QACLsD,OAAO,WACPX,KAAK,iBACLY,IAAI,IACJC,IAAI,MACJC,KAAK,MACLC,QAAUN,KAAKO,eAEjB,2BAAON,IAAI,kBAAX,gBAKR,yBAAKH,UAAU,cAEf,0CACA,wBAAIU,GAAG,kBACL,2BAAOA,GAAG,YAAYC,UAAQ,U,GAnKtBC,aCMEC,QACW,cAA7BxE,OAAOyE,SAASC,UAEe,UAA7B1E,OAAOyE,SAASC,UAEhB1E,OAAOyE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS1C,SAAS2C,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.7ef14b8e.chunk.js","sourcesContent":["let audioContext, osc, filter, amp, lfo, delay, delaySource, feedback, recorder, recordingStream;\r\n\r\naudioContext = new(window.AudioContext || window.webkitAudioContext)();\r\n\r\nclass Synth {\r\n    init() {\r\n        // Set gain/amp\r\n        amp = audioContext.createGain();\r\n        amp.gain.setValueAtTime(1, audioContext.currentTime);\r\n        \r\n        // Set filter\r\n        filter = audioContext.createBiquadFilter();\r\n        filter.type = \"lowshelf\";\r\n        filter.frequency.setValueAtTime(1000, audioContext.currentTime);\r\n        filter.gain.setValueAtTime(25, audioContext.currentTime);\r\n\r\n        // Set oscillator\r\n        osc = audioContext.createOscillator();\r\n        osc.type = \"sine\";\r\n        osc.frequency.value = 440;\r\n\r\n        // Set lfo\r\n        lfo = audioContext.createOscillator();\r\n        lfo.type = \"sine\";\r\n        lfo.frequency.value = 20;\r\n\r\n        // Connect nodes\r\n        lfo.connect(amp.gain);\r\n        osc.connect(filter);\r\n        filter.connect(amp);\r\n        lfo.start();\r\n        osc.start();\r\n\r\n        // Set delay\r\n        delaySource = amp;\r\n        delay = audioContext.createDelay();\r\n        delay.delayTime.value = 0.5;\r\n\r\n        feedback = audioContext.createGain();\r\n        feedback.gain.value = 0.8;\r\n\r\n        delay.connect(feedback);\r\n        feedback.connect(delay);\r\n        delaySource.connect(delay);\r\n    }\r\n\r\n    start() {\r\n        if (audioContext.state !== \"running\") {\r\n            audioContext.resume();\r\n        }\r\n        amp.connect(audioContext.destination);\r\n        delaySource.connect(audioContext.destination);\r\n        delay.connect(audioContext.destination);\r\n    }\r\n\r\n    stop() {\r\n        amp.disconnect(audioContext.destination);\r\n        delay.disconnect(audioContext.destination);\r\n    }\r\n\r\n    changeFreq(oscFreq) {\r\n        console.log(\"DCO frequency: \" + oscFreq + \" Hz\");\r\n        osc.frequency.value = oscFreq;\r\n    }\r\n\r\n    changeFilterFreq(filterFreq) {\r\n        console.log(\"Filter frequency: \" + filterFreq + \" Hz\");\r\n        filter.frequency.value = filterFreq;\r\n    }\r\n\r\n    changeAmp(volume) {\r\n        console.log(\"Volume: \" + volume);\r\n        amp.gain.value = volume;\r\n        delaySource.gain.value = volume;\r\n    }\r\n\r\n    changeLfoSpeed(amount) {\r\n        console.log(\"LFO speed: \" + amount + \" Hz\");\r\n        lfo.frequency.value = amount;\r\n    }\r\n\r\n    changeDelayTime(time) {\r\n        console.log(\"Delay time: \" + time);\r\n        delay.delayTime.value = time;\r\n    }\r\n\r\n    changeDelayFeedback(amount) {\r\n        console.log(\"Delay feedback: \" + amount);\r\n        feedback.gain.value = amount;\r\n    }\r\n\r\n    startRecording() {\r\n        recordingStream = audioContext.createMediaStreamDestination();\r\n\r\n        // Connect audio sources to recording stream\r\n        amp.connect(recordingStream);\r\n        delaySource.connect(recordingStream);\r\n        delay.connect(recordingStream);\r\n\r\n        let options = {\r\n            audioBitsPerSecond: 128000, // Maximum possible \r\n            mimeType: \"audio/webm\" // Only available audio format\r\n        }\r\n        recorder = new MediaRecorder(recordingStream.stream, options);\r\n        recorder.start();\r\n    }\r\n\r\n    stopRecording() {\r\n        recorder.addEventListener(\"dataavailable\", function(e) {\r\n            document.querySelector(\"#recording\").src=URL.createObjectURL(e.data);\r\n            recorder = null;\r\n            recordingStream = null;\r\n        });\r\n        recorder.stop();\r\n    }\r\n}\r\n\r\nexport default Synth;","import React, { Component } from \"react\";\r\nimport './index.css';\r\nimport Synth from \"./synth\";\r\n\r\nlet synth = new Synth();\r\n\r\nclass App extends Component {\r\n  state = {\r\n    playing: false,\r\n    recording: false\r\n  }\r\n\r\n  // Initialise audio\r\n  componentDidMount() { \r\n    synth.init();\r\n  }\r\n  \r\n  startSynth = playing => {\r\n    if (playing) {\r\n      synth.stop();\r\n      this.setState({playing: false});\r\n    } else {\r\n      synth.start();\r\n      this.setState({playing: true});\r\n    }\r\n  }\r\n\r\n  toggleRecording = recording => {\r\n    if (!recording) {\r\n      synth.startRecording();\r\n      this.setState({recording: true});\r\n    } else {\r\n      synth.stopRecording();\r\n      this.setState({recording: false});\r\n    }\r\n  }\r\n\r\n  handleChange({ target }) {\r\n    switch (target.name) {\r\n      case \"freq\":\r\n        synth.changeFreq(target.value)\r\n        break;\r\n      case \"filter-freq\":\r\n        synth.changeFilterFreq(target.value)\r\n        break;\r\n      case \"amp\":\r\n        synth.changeAmp(target.value)\r\n        break;\r\n      case \"lfo\":\r\n        synth.changeLfoSpeed(target.value)\r\n        break;\r\n      case \"delay-time\":\r\n        synth.changeDelayTime(target.value)\r\n        break;\r\n      case \"delay-feedback\":\r\n        synth.changeDelayFeedback(target.value)\r\n        break;\r\n      default:\r\n        console.log(\"Default case\")\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"top\">\r\n          <button \r\n            className=\"on-btn\"\r\n            onClick={() => this.startSynth(this.state.playing)}\r\n          >\r\n            {this.state.playing ? \"On\" : \"Off\"}\r\n          </button>\r\n          <p className=\"title\">NOISER</p>\r\n          <button \r\n            className=\"record-btn\"\r\n            onClick={ () => this.toggleRecording(this.state.recording) }\r\n            name={this.state.recording ? \"stop\" : \"record\"}\r\n          >\r\n            <div className={this.state.recording ? \"square\" : \"circle\"}></div>\r\n          </button>\r\n        </div>\r\n        <div className=\"controls\">\r\n          <div className=\"module\">\r\n            <label className=\"module-Title first-module-title\" for=\"delay-module\">Source</label>\r\n            <div name=\"delay-module\" className=\"controls\">\r\n              <div className=\"control first-control\">\r\n                <input \r\n                  type=\"range\"\r\n                  orient=\"vertical\"\r\n                  name=\"amp\" \r\n                  min='0' \r\n                  max='1' \r\n                  step='0.01'\r\n                  onInput={ this.handleChange } \r\n                />\r\n                <label for=\"amp\">DCO Volume</label>\r\n              </div>\r\n              <div className=\"control\">\r\n                <input \r\n                  type=\"range\"\r\n                  orient=\"vertical\" \r\n                  name=\"freq\" \r\n                  min='10' \r\n                  max='8000' \r\n                  step='1'\r\n                  onInput={ this.handleChange } \r\n                />\r\n                <label for=\"freq\">DCO</label>\r\n              </div>\r\n              <div className=\"control\">\r\n                <input \r\n                  type=\"range\"\r\n                  orient=\"vertical\"\r\n                  name=\"filter-freq\" \r\n                  min='20' \r\n                  max='8000' \r\n                  step='1'\r\n                  onInput={ this.handleChange } \r\n                />\r\n                <label for=\"filter-freq\">LPF</label>\r\n              </div>\r\n              <div className=\"control\">\r\n                <input \r\n                  type=\"range\"\r\n                  orient=\"vertical\"\r\n                  name=\"lfo\" \r\n                  min='1' \r\n                  max='100' \r\n                  step='1'\r\n                  onInput={ this.handleChange } \r\n                />\r\n                <label for=\"lfo\">LFO</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"module\">\r\n            <label className=\"module-Title\" for=\"delay-module\">Delay</label>\r\n            <div name=\"delay-module\" className=\"controls\">\r\n              <div className=\"control\">\r\n                <input \r\n                  type=\"range\" \r\n                  orient=\"vertical\"\r\n                  name=\"delay-time\" \r\n                  min='0' \r\n                  max='1' \r\n                  step='0.05'\r\n                  onInput={ this.handleChange } \r\n                />\r\n                <label for=\"delay-time\">Time</label>\r\n              </div>\r\n              <div className=\"control\">\r\n                <input \r\n                  type=\"range\"\r\n                  orient=\"vertical\"\r\n                  name=\"delay-feedback\" \r\n                  min='0' \r\n                  max='0.9' \r\n                  step='0.1'\r\n                  onInput={ this.handleChange } \r\n                />\r\n                <label for=\"delay-feedback\">Feedback</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"recording\">\r\n        </div>\r\n        <h3>Recordings</h3>\r\n        <ol id=\"recordingsList\">\r\n          <audio id=\"recording\" controls></audio>\r\n        </ol>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}